AWSTemplateFormatVersion: '2010-09-09'
Description: SNS and SQS for Glue Schema Change Notifications

Parameters:
  NotificationTopicName:
    Type: String
    Default: "GlueSchemaChangeNotifications"
    Description: Name of the SNS Topic
    AllowedPattern: "[a-zA-Z0-9_-]+"
    ConstraintDescription: "Topic name can only contain letters, numbers, hyphens, and underscores"
    MaxLength: 256

  QueueName:
    Type: String
    Default: "GlueSchemaChangeQueue"
    Description: Name of the SQS Queue
    AllowedPattern: "[a-zA-Z0-9_-]+"
    ConstraintDescription: "Queue name can only contain letters, numbers, hyphens, and underscores"
    MaxLength: 80

  MessageRetentionPeriod:
    Type: Number
    Default: 1209600
    Description: Number of seconds to retain messages (max 14 days)
    MinValue: 60
    MaxValue: 1209600

  SendEmailSNSName:
    Default: "CrossRegion-Send-Email-Topic"
    Description: "SNS Topic Name"
    Type: "String"

  FunctionName:
    Default: "CrossRegion_Send_Email_Lambda"
    Description: "Lambda Function Name"
    Type: "String"

Resources:
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Recieve Event Topic
      TopicName: !Ref NotificationTopicName
      Subscription:
        - Endpoint: "hu.shuo@northeastern.edu"
          Protocol: "email"
        - Endpoint: !GetAtt NotificationQueue.Arn
          Protocol: "sqs"

  NotificationTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "SNSPolicy"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action:
              - "sns:AddPermission"
              - "sns:DeleteTopic"
              - "sns:GetTopicAttributes"
              - "sns:ListSubscriptionsByTopic"
              - "sns:Publish"
              - "sns:SetTopicAttributes"
              - "sns:Subscribe"
              - "sns:Receive"
              - "sns:RemovePermission"
            Resource: !Ref "NotificationTopic"
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref "AWS::AccountId"
          - Sid: "EventAccess"
            Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "sns:Publish"
            Resource: !Ref "NotificationTopic"
      Topics:
        - !Ref "NotificationTopic"

  NotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName
      VisibilityTimeout: 300
      MessageRetentionPeriod: !Ref MessageRetentionPeriod
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Purpose
          Value: GlueSchemaChangeQueue

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${QueueName}-DLQ"
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600
      SqsManagedSseEnabled: true
      Tags:
        - Key: Purpose
          Value: GlueSchemaChangeDeadLetterQueue

  NotificationQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "RootAccountAccess"
            Effect: "Allow"
            Principal:
              AWS: !Join ["", ["arn:aws:iam::", !Ref "AWS::AccountId", ":root"]]
            Action:
              - "sqs:*"
            Resource: !GetAtt "NotificationQueue.Arn"
          - Sid: "Topic-subscription"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action:
              - "sqs:SendMessage"
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${NotificationTopicName}"
            Resource: !GetAtt "NotificationQueue.Arn"
      Queues:
        - !Ref "NotificationQueue"

  SendEmailSNS:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: "Send Email Topic"
      Subscription:
        - Endpoint: "hu.shuo@northeastern.edu"
          Protocol: "email"
      TopicName: !Ref "SendEmailSNSName"

  SendEmailSNSPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AccountAccess"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action:
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
            Resource: !Ref "SendEmailSNS"
            Condition:
              StringEquals:
                AWS:SourceOwner: "742465305217"
          - Sid: "LambdaAccess"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sns:Publish"
            Resource: !Ref "SendEmailSNS"
      Topics:
        - !Ref "SendEmailSNS"

  SendEmailLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Architectures:
        - "x86_64"
      Code:
        S3Bucket: "us-west-2-email-lambda-functions"
        S3Key: "email_lambda.zip"
      Description: "Email lambda using CFT"
      EphemeralStorage:
        Size: 1024
      FunctionName: !Ref "FunctionName"
      Handler: "send_email_lambda.lambda_handler"
      MemorySize: 128
      PackageType: "Zip"
      Role: !GetAtt "SendEmailLambdaRole.Arn"
      Runtime: "python3.10"
      Timeout: 120
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref "SendEmailSNS"

  SendEmailLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "EmailLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "LogAccess"
                Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "arn:aws:logs:*:*:*"
              - Sid: "SQSAccess"
                Effect: "Allow"
                Action:
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueUrl"
                  - "sqs:ChangeMessageVisibility"
                  - "sqs:ReceiveMessage"
                  - "sqs:GetQueueAttributes"
                Resource: !GetAtt "NotificationQueue.Arn"
              - Sid: "SNSPermission"
                Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: !Ref "SendEmailSNS"
      RoleName: "CrossRegion-Email-Lambda-Role"

  SQSEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    DependsOn:
      - "NotificationQueue"
      - "SendEmailLambda"
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt "NotificationQueue.Arn"
      FunctionName: !GetAtt "SendEmailLambda.Arn"

Outputs:
  SnsTopicArn:
    Description: ARN of the SNS Topic
    Value: !Ref NotificationTopic
    Export:
      Name: !Sub "${AWS::StackName}-TopicArn"

  SnsTopicName:
    Description: Name of the SNS Topic
    Value: !GetAtt NotificationTopic.TopicName
    Export:
      Name: !Sub "${AWS::StackName}-TopicName"

  SqsQueueUrl:
    Description: URL of the SQS Queue
    Value: !Ref NotificationQueue
    Export:
      Name: !Sub "${AWS::StackName}-QueueUrl"

  SqsQueueArn:
    Description: ARN of the SQS Queue
    Value: !GetAtt NotificationQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-QueueArn"

  DeadLetterQueueUrl:
    Description: URL of the Dead Letter Queue
    Value: !Ref DeadLetterQueue
    Export:
      Name: !Sub "${AWS::StackName}-DLQUrl"

  DeadLetterQueueArn:
    Description: ARN of the Dead Letter Queue
    Value: !GetAtt DeadLetterQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DLQArn"
